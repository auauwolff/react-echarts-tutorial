import { useState } from "react";
import ReactEcharts from "echarts-for-react";
import * as echarts from "echarts";
import { populationDataFemale } from "./DataFemale";
import { populationDataMale } from "./DataMale";
import ecStat from "echarts-stat";
import * as d3Array from "d3-array";
import * as d3Scales from "d3-scale";
import { format, parseISO } from "date-fns";

const toLocaleStr = (string) => string?.toLocaleString();

const Q1 = [
  413.529925347446, 410.0980039844046, 201.585843237886, 422.2221751418193,
  427.94610343952945, 460.8853261873997, 425.36796266397795, 421.00089247255767,
  438.42129327003244, 529.3936006903226, 473.60267684695935,
];

const Q2 = [
  401.42715443379313, 425.67025403334367, 399.61601248400916, 453.8545685379299,
  379.0520646188602, 528.4685116311318, 487.0483014417229, 403.5135079284643,
  468.1826975731746, 394.0611867079491, 359.16501902092983, 461.3583183329116,
  411.1880571095437, 410.84494541026464, 416.4641554262862,
];

const Q3 = [
  453.26547353597005, 432.30702773647533, 425.39798942683046, 399.2586825801749,
  434.47292264123257, 415.70205744853837, 393.4671279575462, 417.1749081015178,
  431.7513530207233, 423.5133803460549, 439.5944908231771, 426.19823723886765,
  423.09735466773026, 443.759623494692, 441.1895402083294, 381.62791615807333,
  440.8552191364341,
];

const Q4 = [
  453.26547353597005, 432.30702773647533, 425.39798942683046, 399.2586825801749,
  434.47292264123257, 415.70205744853837, 393.4671279575462, 417.1749081015178,
  431.7513530207233,
];

//Creates an array of dates
const getDatesInRange = (min, max) =>
  Array((max - min) / 86400000)
    .fill(0)
    .map((_, i) => new Date(new Date().setDate(min.getDate() + i)));

const dates = [
  "2021-01-01T04:03:34.193Z",
  "2021-01-02T04:03:34.193Z",
  "2021-01-03T04:03:34.193Z",
  "2021-01-04T04:03:34.193Z",
  "2021-01-05T04:03:34.193Z",
  "2021-01-06T04:03:34.193Z",
  "2021-01-07T04:03:34.193Z",
  "2021-01-08T04:03:34.193Z",
  "2021-01-09T04:03:34.193Z",
  "2021-01-10T04:03:34.193Z",
  "2021-01-11T04:03:34.193Z",
  "2021-01-12T04:03:34.193Z",
  "2021-01-13T04:03:34.193Z",
  "2021-01-14T04:03:34.193Z",
  "2021-01-15T04:03:34.193Z",
  "2021-01-16T04:03:34.193Z",
  "2021-01-17T04:03:34.193Z",
  "2021-01-18T04:03:34.193Z",
  "2021-01-19T04:03:34.193Z",
  "2021-01-20T04:03:34.193Z",
  "2021-01-21T04:03:34.193Z",
  "2021-01-22T04:03:34.193Z",
  "2021-01-23T04:03:34.193Z",
  "2021-01-24T04:03:34.193Z",
  "2021-01-25T04:03:34.193Z",
  "2021-01-26T04:03:34.193Z",
  "2021-01-27T04:03:34.193Z",
  "2021-01-28T04:03:34.193Z",
  "2021-01-29T04:03:34.193Z",
  "2021-01-30T04:03:34.193Z",
  "2021-01-31T04:03:34.193Z",
  "2021-02-01T04:03:34.193Z",
  "2021-02-02T04:03:34.193Z",
  "2021-02-03T04:03:34.193Z",
  "2021-02-04T04:03:34.193Z",
  "2021-02-05T04:03:34.193Z",
  "2021-02-06T04:03:34.193Z",
  "2021-02-07T04:03:34.193Z",
  "2021-02-08T04:03:34.193Z",
  "2021-02-09T04:03:34.193Z",
  "2021-02-10T04:03:34.193Z",
  "2021-02-11T04:03:34.193Z",
  "2021-02-12T04:03:34.193Z",
  "2021-02-13T04:03:34.193Z",
  "2021-02-14T04:03:34.193Z",
  "2021-02-15T04:03:34.193Z",
  "2021-02-16T04:03:34.193Z",
  "2021-02-17T04:03:34.193Z",
  "2021-02-18T04:03:34.193Z",
  "2021-02-19T04:03:34.193Z",
  "2021-02-20T04:03:34.193Z",
  "2021-02-21T04:03:34.193Z",
  "2021-02-22T04:03:34.193Z",
  "2021-02-23T04:03:34.193Z",
  "2021-02-24T04:03:34.193Z",
  "2021-02-25T04:03:34.193Z",
  "2021-02-26T04:03:34.193Z",
  "2021-02-27T04:03:34.193Z",
  "2021-02-28T04:03:34.193Z",
  "2021-03-01T04:03:34.193Z",
  "2021-03-02T04:03:34.193Z",
  "2021-03-03T04:03:34.193Z",
  "2021-03-04T04:03:34.193Z",
  "2021-03-05T04:03:34.193Z",
  "2021-03-06T04:03:34.193Z",
  "2021-03-07T04:03:34.193Z",
  "2021-03-08T04:03:34.193Z",
  "2021-03-09T04:03:34.193Z",
  "2021-03-10T04:03:34.193Z",
  "2021-03-11T04:03:34.193Z",
  "2021-03-12T04:03:34.193Z",
  "2021-03-13T04:03:34.193Z",
  "2021-03-14T04:03:34.193Z",
  "2021-03-15T04:03:34.193Z",
  "2021-03-16T04:03:34.193Z",
  "2021-03-17T04:03:34.193Z",
  "2021-03-18T04:03:34.193Z",
  "2021-03-19T04:03:34.193Z",
  "2021-03-20T04:03:34.193Z",
  "2021-03-21T04:03:34.193Z",
  "2021-03-22T04:03:34.193Z",
  "2022-03-23T04:03:34.193Z",
  "2021-03-24T04:03:34.193Z",
  "2021-03-25T04:03:34.193Z",
  "2021-03-26T04:03:34.193Z",
  "2021-03-27T04:03:34.193Z",
  "2021-03-28T04:03:34.193Z",
  "2021-03-29T04:03:34.193Z",
  "2021-03-30T04:03:34.193Z",
  "2021-03-31T04:03:34.193Z",
  "2021-04-01T04:03:34.193Z",
  "2021-04-02T04:03:34.193Z",
  "2021-04-03T04:03:34.193Z",
  "2021-04-04T04:03:34.193Z",
  "2021-04-05T04:03:34.193Z",
  "2021-04-06T04:03:34.193Z",
  "2021-04-07T04:03:34.193Z",
  "2021-04-08T04:03:34.193Z",
  "2021-04-09T04:03:34.193Z",
  "2021-04-10T04:03:34.193Z",
  "2021-04-11T04:03:34.193Z",
  "2021-04-12T04:03:34.193Z",
  "2021-04-13T04:03:34.193Z",
  "2021-04-14T04:03:34.193Z",
  "2021-04-15T04:03:34.193Z",
  "2021-04-16T04:03:34.193Z",
  "2021-04-17T04:03:34.193Z",
  "2021-04-18T04:03:34.193Z",
  "2021-04-19T04:03:34.193Z",
  "2021-04-20T04:03:34.193Z",
  "2021-04-21T04:03:34.193Z",
  "2021-04-22T04:03:34.193Z",
  "2021-04-23T04:03:34.193Z",
  "2021-04-24T04:03:34.193Z",
  "2021-04-25T04:03:34.193Z",
  "2021-04-26T04:03:34.193Z",
  "2021-04-27T04:03:34.193Z",
  "2021-04-28T04:03:34.193Z",
  "2021-04-29T04:03:34.193Z",
  "2021-04-30T04:03:34.193Z",
  "2021-05-01T04:03:34.193Z",
  "2021-05-02T04:03:34.193Z",
  "2021-05-03T04:03:34.193Z",
  "2021-05-04T04:03:34.193Z",
  "2021-05-05T04:03:34.193Z",
  "2021-05-06T04:03:34.193Z",
  "2021-05-07T04:03:34.193Z",
  "2021-05-08T04:03:34.193Z",
  "2021-05-09T04:03:34.193Z",
  "2021-05-10T04:03:34.193Z",
  "2021-05-11T04:03:34.193Z",
  "2021-05-12T04:03:34.193Z",
  "2021-05-13T04:03:34.193Z",
  "2021-05-14T04:03:34.193Z",
  "2021-05-15T04:03:34.193Z",
  "2021-05-16T04:03:34.193Z",
  "2021-05-17T04:03:34.193Z",
  "2021-05-18T04:03:34.193Z",
  "2021-05-19T04:03:34.193Z",
  "2021-05-20T04:03:34.193Z",
  "2021-05-21T04:03:34.193Z",
  "2021-05-22T04:03:34.193Z",
  "2021-05-23T04:03:34.193Z",
  "2021-05-24T04:03:34.193Z",
  "2021-05-25T04:03:34.193Z",
  "2021-05-26T04:03:34.193Z",
  "2021-05-27T04:03:34.193Z",
  "2021-05-28T04:03:34.193Z",
  "2021-05-29T04:03:34.193Z",
  "2021-05-30T04:03:34.193Z",
  "2021-05-31T04:03:34.193Z",
  "2021-06-01T04:03:34.193Z",
  "2021-06-02T04:03:34.193Z",
  "2021-06-03T04:03:34.193Z",
  "2021-06-04T04:03:34.193Z",
  "2021-06-05T04:03:34.193Z",
  "2021-06-06T04:03:34.193Z",
  "2021-06-07T04:03:34.193Z",
  "2021-06-08T04:03:34.193Z",
  "2021-06-09T04:03:34.193Z",
  "2021-06-10T04:03:34.193Z",
  "2021-06-11T04:03:34.193Z",
  "2021-06-12T04:03:34.193Z",
  "2021-06-13T04:03:34.193Z",
  "2021-06-14T04:03:34.193Z",
  "2021-06-15T04:03:34.193Z",
  "2021-06-16T04:03:34.193Z",
  "2021-06-17T04:03:34.193Z",
  "2021-06-18T04:03:34.193Z",
  "2021-06-19T04:03:34.193Z",
  "2021-06-20T04:03:34.193Z",
  "2021-06-21T04:03:34.193Z",
  "2021-06-22T04:03:34.193Z",
  "2021-06-23T04:03:34.193Z",
];

//BOXPLOT
const getBoxPlotOption = () => {
  const data = [
    [
      281.94343613681514, 439.66035504289584, 384.70331938922254,
      434.73354646284633, 416.631142217515,
    ],
    [
      384.35240443122524, 420.19925416337844, 394.84822472172687,
      408.3166535100738, 400.66873472145545,
    ],
    [
      336.0206424517152, 419.01017573903533, 370.18370550783976,
      401.10418657150325, 383.54703481834014,
    ],
    [
      238.9998089541643, 529.7655824453082, 415.3626543776072,
      490.8399649894851, 453.15128229170807,
    ],
    [
      258.088184526835, 448.67493011159837, 370.8856155059115,
      424.07231960056885, 391.5795224804979,
    ],
    [
      123.89527123949841, 408.3999579364619, 276.5298107530065,
      405.31091843612546, 377.3758296173813,
    ],
    [
      242.73919957520965, 412.59617288872585, 321.69825889837307,
      400.51782592120685, 388.88863792374445,
    ],
    [
      204.32721064213564, 413.0262523206186, 336.3071736125158,
      395.4165686638707, 381.11837356769934,
    ],
    [
      321.56731020398075, 392.0445477364887, 357.8836451014178,
      390.0577795932052, 385.4850041725593,
    ],
    [
      229.54386979567576, 414.5226924287879, 269.51338012356337,
      343.4493178646401, 309.63015974126364,
    ],
    [
      345.0460442824721, 488.44339745377385, 373.53196154243636,
      426.0860659055666, 396.8629176844462,
    ],
    [
      369.57434769484456, 394.9732515760515, 375.4243711169141,
      387.87728944827126, 380.0755336461077,
    ],
    [
      364.88140814776665, 492.74807342768753, 426.10781958605,
      469.27795632422396, 451.57548655170126,
    ],
    [
      426.4728698662244, 507.90221128510325, 434.4402639728954,
      473.1538179043755, 439.69390244157523,
    ],
    [
      379.2878880057281, 408.2649221351123, 390.5962778479479,
      406.7019707991515, 404.1600490507607,
    ],
    [
      310.62253090721407, 428.7671815661777, 360.0692589818669,
      406.20868758442106, 393.1137579481906,
    ],
    [
      321.4921650775111, 480.39067620078407, 339.7597636353744,
      405.05621154458913, 352.42480630008197,
    ],
    [
      409.95555624626616, 431.07174012997257, 414.91030389651945,
      426.75015979088397, 424.0848590636647,
    ],
    [
      408.85346773944144, 476.23075262298704, 444.1796830737814,
      468.7853927318186, 463.61502051284117,
    ],
    [
      354.94269361316555, 405.67194835358396, 366.7459318981376,
      394.6037179114442, 378.5787258620028,
    ],
    [
      351.81316631851035, 426.5468252849749, 374.0554319592879,
      407.77460385410456, 393.5438823653569,
    ],
    [
      158.39931900803313, 573.3109795718632, 386.3349249377138,
      536.1389633769849, 510.70785524571494,
    ],
    [
      241.64857332523744, 504.3980188863285, 404.0196332903659,
      489.02292786614186, 477.31127033394455,
    ],
    [
      278.50314327742035, 402.45300977561334, 305.724086576744,
      391.53349824979426, 364.93022418677367,
    ],
    [
      394.6447505912386, 528.236462356832, 406.3924113428214,
      454.35237240180066, 419.33627218737445,
    ],
    [
      365.15893928245595, 465.4975451111032, 390.7822377399858,
      464.2725653266533, 451.92572020639955,
    ],
    [
      383.7158882199058, 445.0766071097694, 404.54414060497123,
      429.10298913848777, 415.0241874726352,
    ],
    [
      419.4529736776143, 443.98734886278527, 424.9557476978065,
      438.58405104616077, 431.81963747376744,
    ],
    [
      423.3557802528014, 475.13466575824816, 433.52217736005696,
      458.2736853581621, 436.43871085413707,
    ],
    [
      321.2998876939141, 391.37171035099993, 342.2753545806539,
      382.0158451208721, 367.95540067906893,
    ],
    [
      398.2019746183769, 474.2171302739023, 434.16401366650484,
      472.36693340543525, 464.22082059924014,
    ],
    [
      373.46550611696523, 461.15356534037727, 414.89201416936316,
      449.7220413035875, 437.56320643401284,
    ],
    [
      417.08348666480475, 432.50721992254967, 421.7560813555964,
      429.03989749806453, 425.301832672304,
    ],
    [
      348.2508975781915, 432.74143623190065, 384.33571001829773,
      414.181655142052, 394.5744752391196,
    ],
    [
      414.94038295079736, 451.6724596445923, 424.6133990656072,
      444.33244621685793, 431.28171772934525,
    ],
    [
      375.95132564619286, 439.01135666237917, 401.1250812826263,
      430.27903361445044, 418.9508560382678,
    ],
    [
      302.97176649331203, 466.5374999614589, 366.4658676498916,
      420.4683882652008, 391.2782484312031,
    ],
    [
      396.55891735654075, 430.61666516691236, 410.0654027755676,
      424.28441342746805, 421.15924696643754,
    ],
    [
      405.4148605484485, 464.01294879819784, 421.07694393175024,
      442.42576210969634, 430.88501862075134,
    ],
    [
      411.5641429831242, 431.55844581794366, 419.56693737897245,
      427.4598233131373, 424.7002357867223,
    ],
    [
      373.9794101682852, 457.42154128455985, 427.5178778900061,
      451.67110375634815, 441.61732605489516,
    ],
    [
      393.26580397863086, 457.43115235013306, 415.14194386569045,
      437.25453061204485, 425.1042261282038,
    ],
    [
      402.308070416165, 435.19458522708214, 417.7497115363957,
      428.4449977990648, 424.0284819504319,
    ],
    [
      421.5570597196489, 461.5607416023421, 436.6618245112322,
      450.85742247815176, 443.2216473934183,
    ],
    [
      417.0027667729031, 504.25361601932383, 423.33017259473087,
      459.0489078219279, 434.6421544512006,
    ],
    [
      336.2379979533234, 394.30369496496775, 372.2600785361, 390.99575378004664,
      384.39441958213206,
    ],
    [
      380.7441194137127, 462.7388126791577, 427.0955918258081, 454.61484644706,
      444.8293985795221,
    ],
    [
      386.95640770444, 417.5917003050017, 395.15739770428263,
      407.69691116330364, 398.1708261699618,
    ],
    [
      403.76806126478596, 451.0307180381397, 418.9584578522173,
      432.38205021447004, 427.64184344680825,
    ],
    [
      381.81805653392814, 420.39399187032814, 389.29211825120854,
      409.9399067168098, 394.58274995354174,
    ],
    [
      433.9610696225587, 477.7357166474541, 443.9327682946493,
      463.77636878121046, 454.3727525066125,
    ],
    [
      352.7761003734937, 412.79005686795176, 369.71013651192357,
      388.3939927257968, 378.15195098382065,
    ],
    [
      486.8039610134126, 578.1011239501994, 510.9117724367706, 546.025250825493,
      527.8088528524183,
    ],
    [
      434.59895172625886, 518.7102734478754, 471.683686037188,
      502.4129168462578, 493.04489156662476,
    ],
    [
      324.71702111351686, 451.33842220451197, 378.045742998464,
      428.98127285846465, 405.04850214966075,
    ],
    [
      437.7894290428003, 494.19612559515406, 450.38297090950255,
      485.98242423684667, 471.4690780520015,
    ],
    [
      312.8341338610121, 420.7282811555528, 375.44146187250186,
      412.68091154339635, 402.12377865963276,
    ],
    [
      128.6127538299989, 413.44688186668293, 307.6544303162382,
      410.6756077256215, 379.50321554691095,
    ],
    [
      401.81678275354585, 512.5504597635577, 430.48089650255133,
      492.2357401632719, 481.4466020034372,
    ],
    [
      395.7877373064556, 424.1571653832764, 404.811534681298, 417.5645795377894,
      412.800148823747,
    ],
    [
      392.79229701347197, 475.9410608500477, 393.7011985855918,
      427.9886922349375, 400.48088154753566,
    ],
    [
      404.50732314138054, 439.0462270277704, 409.8133903176142,
      423.1149205349582, 413.1443630234914,
    ],
    [
      352.5989193160085, 473.3459160846018, 385.6984191166584,
      441.36143157823363, 425.129994920026,
    ],
    [
      386.4197036328156, 424.1537458210725, 400.62716717992896,
      419.56884078888027, 410.6708984753842,
    ],
    [
      150.9128232606497, 292.26540199908504, 165.09673593277304,
      238.07495054299895, 195.46183330519864,
    ],
    [
      365.0661823466865, 504.84185818710444, 403.2723312674894,
      441.17201901614925, 422.2501383139694,
    ],
    [
      391.99088565069883, 468.2958234755787, 412.2032399114041,
      443.6889669676548, 426.1343557736973,
    ],
    [
      414.85032816696696, 507.80874892996985, 441.20418996645446,
      480.56646240834493, 466.8735236161376,
    ],
    [
      162.21291639005165, 461.6324370803094, 381.6280507863978,
      469.1078745415581, 439.265648646303,
    ],
    [
      389.725960830536, 494.7876881708465, 396.1702342729845,
      445.83155067213085, 413.8540185264487,
    ],
    [
      361.67963281954496, 557.1999337777249, 402.8071339868579,
      474.035452553207, 432.7308339683763,
    ],
    [
      464.91868211672465, 559.237713491895, 499.7526617999809,
      559.0345395806644, 546.7090035763354,
    ],
    [
      313.853078054909, 586.8767160244162, 418.77278767312754,
      528.4325660207911, 470.86990137180385,
    ],
    [
      244.76089375400284, 446.44365700046166, 290.32953884685253,
      386.8422085890693, 332.1757335528572,
    ],
    [
      318.0919014293856, 440.24435324135675, 372.57290877304285,
      416.23018051343604, 398.62602531081643,
    ],
    [
      298.6457525867312, 397.92383848472616, 327.07544259057306,
      373.77857693595365, 357.5687521352329,
    ],
    [
      319.70568144696114, 399.942672247907, 353.15176686629604,
      384.4178017157336, 371.0686356050999,
    ],
    [
      394.0641294303323, 413.7888005645658, 400.5976126238636,
      410.7741119932656, 406.6287896053337,
    ],
    [
      246.24520099777374, 402.90689707516066, 333.3991271660279,
      384.8885202726023, 370.1265416022094,
    ],
    [
      318.507894840237, 363.73570344445545, 332.98637641371334,
      350.2849239015151, 343.5541586184437,
    ],
    [
      240.81541442122213, 419.28421800157145, 331.39369601021974,
      378.9182423277996, 355.7339160892555,
    ],
    [
      387.49393639303685, 436.48830802940734, 398.97238834635544,
      420.9614559286135, 410.18295389588235,
    ],
    [
      380.6284256918921, 431.2872801190715, 390.49407266558944,
      415.43813963996377, 399.94566769919714,
    ],
    [
      282.55992280299785, 419.67435691003664, 339.99878103191605,
      385.27192648283125, 363.841015700256,
    ],
    [
      326.79866077875846, 463.3427116060619, 384.89676311038136,
      445.5141600171859, 432.86982346323975,
    ],
    [
      273.81281597654356, 405.7745219487222, 327.1618995423098,
      377.82184235231193, 345.52982790774604,
    ],
    [
      392.33536553761854, 470.0917133085163, 405.3353067389506,
      437.55733596647536, 417.49368626286713,
    ],
    [
      355.55395536395974, 442.5560535437089, 381.74224876341884,
      413.0804675222804, 396.5910053193058,
    ],
    [
      169.13717464489295, 435.4036173885683, 242.51264132682866,
      348.2753558628508, 310.9860256551506,
    ],
    [196.76157166270906, 196.76157166270906, null, null, 196.76157166270906],
    [
      339.55817251940675, 432.5993417095259, 360.66496098864786,
      397.5171436018751, 368.08008476083535,
    ],
    [
      387.56240882426755, 398.7083414135357, 388.95751741594245,
      395.897645474946, 389.71767933388634,
    ],
    [
      390.1926141560456, 453.5074542081197, 403.2360940371272,
      434.79450078698636, 409.68352655800834,
    ],
    [
      231.65995297870435, 402.82764878974814, 312.2046122526136,
      410.4978333873224, 392.543897777874,
    ],
    [
      441.04636394682626, 497.65679995331675, 458.54015684023193,
      481.8100146547156, 468.09181059340096,
    ],
    [
      352.9479773702906, 412.76251314718246, 365.5319989379331,
      390.06672607604065, 372.9863665909704,
    ],
    [
      372.8147541685927, 412.79995372139734, 381.54276589618456,
      400.4779631151991, 388.99838778531534,
    ],
    [
      393.2845002972636, 509.05437432186034, 425.31973106135274,
      473.45259727297037, 443.7142869919552,
    ],
    [
      400.49010834764715, 444.74378976892905, 411.6047194517939,
      437.17873611196364, 428.00932724911974,
    ],
    [
      448.1893694023128, 477.17370571664515, 454.8675870199451,
      470.5655826545879, 459.15684919566365,
    ],
    [
      400.21160083950116, 423.64568231888603, 408.22144204680774,
      418.23115050908496, 413.4982801128915,
    ],
    [
      371.41737117462867, 500.2637790617005, 402.99085160792237,
      444.9240817280419, 418.2851042140272,
    ],
    [
      296.2060663700057, 430.62477355631484, 346.8111469517648,
      393.5954681206644, 354.535619401554,
    ],
    [
      413.42234706580797, 430.9477306313611, 420.7497848656845,
      428.7558324944426, 425.2643963425119,
    ],
    [
      208.76484861528, 573.8756978855563, 396.1431733139664, 471.40125888148145,
      436.8640306843161,
    ],
    [
      307.21967877678975, 499.66338778390855, 412.433605020096,
      476.8663640140693, 460.1194947022706,
    ],
    [
      399.4759621533848, 477.10257584955167, 429.5049555035934,
      454.1103855435703, 443.8112756051344,
    ],
    [
      214.0671918149056, 492.72583306908325, 399.6373220406807,
      460.13095821508387, 430.255661386202,
    ],
    [
      404.48282334087946, 437.6864803771904, 413.8858566236481,
      425.73069749432364, 420.3335885225366,
    ],
    [
      431.2875373391637, 467.22481494996623, 438.32127225832744,
      456.8732252679398, 446.31353126289406,
    ],
    [
      406.679735632864, 505.7222075932094, 413.63567199178146,
      452.32537452446275, 422.8572101437004,
    ],
    [
      303.99433719577314, 465.27706373826305, 384.95076225511735,
      466.85820613540915, 449.691721982716,
    ],
    [
      381.4063521785784, 426.06420945326954, 388.7224634904968,
      407.83014286624075, 396.04794356416255,
    ],
    [
      496.60270206333905, 521.2853168476021, 503.7302213975496,
      517.458613041956, 511.692298972094,
    ],
    [
      447.9484651986976, 496.6483056763818, 454.4535227655642,
      473.2586707596924, 459.8249052533725,
    ],
    [
      534.3519992976766, 555.7378076214623, 540.7804467157566,
      550.3584007426412, 547.9698448252891,
    ],
    [
      348.9607032949443, 487.0793560022526, 389.0561529731686,
      443.01219661795193, 407.5905708125692,
    ],
    [
      485.51698818620434, 538.8109526717981, 507.96556138781295,
      536.2737301478465, 529.7692068561303,
    ],
    [
      438.1877308555786, 524.8341198575606, 473.2844976393053,
      501.21670485813286, 489.3143053480426,
    ],
    [
      201.60357325635854, 336.95399190299815, 272.50906767348914,
      312.2289074440973, 301.25482974585765,
    ],
    [
      320.89680786235783, 423.3248200107963, 336.34548935299193,
      373.25424393930547, 342.0089776532834,
    ],
    [
      305.80312415407053, 374.348556133928, 341.07688672973774,
      362.1941307084185, 357.9985832781854,
    ],
    [
      325.2690373842379, 376.0985186152683, 336.6327600202052,
      367.72308521279444, 350.97745438680005,
    ],
    [
      345.4509681928091, 404.3409761961383, 375.39529167393516,
      403.06207310987713, 395.84484800627007,
    ],
    [
      299.88849535511594, 342.32235242817717, 304.7901004932441,
      328.62437209647595, 313.0429487067886,
    ],
    [
      312.4128683545624, 369.106294977041, 324.5553354480314, 350.7156462693823,
      334.07373057224913,
    ],
    [
      353.90981967458407, 372.9659074592226, 361.37794276608304,
      373.6815042813861, 371.62158348056573,
    ],
    [
      122.81008152397246, 419.9042820626811, 345.63236310948355,
      412.82853729437227, 385.5690361512678,
    ],
    [
      161.96324875464367, 419.94159071360764, 283.9785562390188,
      434.290443876604, 415.1422275542909,
    ],
    [
      335.9269905137403, 388.9701835553626, 352.2486135389983,
      374.02130373108827, 362.8635147221611,
    ],
    [
      347.4759816330561, 388.1920251761269, 352.5102839655778,
      369.9843014023598, 356.65299977993686,
    ],
  ];

  const transitDates = [
    ["15/05/2021"],
    ["10/05/2021"],
    ["07/05/2021"],
    ["29/04/2021"],
    ["26/04/2021"],
    ["10/04/2021"],
    ["21/03/2021"],
    ["05/03/2021"],
    ["01/03/2021"],
    ["22/02/2021"],
    ["14/02/2021"],
    ["09/02/2021"],
    ["05/02/2021"],
    ["29/01/2021"],
    ["18/01/2021"],
    ["15/01/2021"],
    ["04/01/2021"],
    ["20/12/2020"],
    ["17/12/2020"],
    ["05/12/2020"],
    ["29/11/2020"],
    ["23/11/2020"],
    ["20/11/2020"],
    ["08/11/2020"],
    ["04/11/2020"],
    ["26/10/2020"],
    ["25/10/2020"],
    ["19/10/2020"],
    ["16/10/2020"],
    ["05/10/2020"],
    ["27/09/2020"],
    ["18/09/2020"],
    ["16/09/2020"],
    ["15/09/2020"],
    ["03/09/2020"],
    ["01/09/2020"],
    ["25/08/2020"],
    ["20/08/2020"],
    ["12/08/2020"],
    ["11/08/2020"],
    ["08/08/2020"],
    ["02/08/2020"],
    ["31/07/2020"],
    ["29/07/2020"],
    ["18/07/2020"],
    ["06/07/2020"],
    ["02/07/2020"],
    ["30/06/2020"],
    ["25/06/2020"],
    ["20/06/2020"],
    ["19/06/2020"],
    ["31/05/2020"],
    ["29/05/2020"],
    ["21/05/2020"],
    ["19/05/2020"],
    ["12/05/2020"],
    ["11/05/2020"],
    ["01/05/2020"],
    ["28/04/2020"],
    ["19/04/2020"],
    ["06/04/2020"],
    ["04/04/2020"],
    ["24/03/2020"],
    ["05/03/2020"],
    ["03/03/2020"],
    ["29/02/2020"],
    ["21/02/2020"],
    ["18/02/2020"],
    ["10/02/2020"],
    ["01/02/2020"],
    ["18/01/2020"],
    ["11/01/2020"],
    ["08/01/2020"],
    ["30/12/2019"],
    ["22/12/2019"],
    ["14/12/2019"],
    ["26/11/2019"],
    ["18/11/2019"],
    ["15/11/2019"],
    ["02/11/2019"],
    ["31/10/2019"],
    ["22/10/2019"],
    ["16/10/2019"],
    ["12/10/2019"],
    ["07/10/2019"],
    ["04/10/2019"],
    ["27/09/2019"],
    ["26/09/2019"],
    ["22/09/2019"],
    ["12/09/2019"],
    ["05/09/2019"],
    ["29/08/2019"],
    ["26/08/2019"],
    ["21/08/2019"],
    ["20/08/2019"],
    ["12/08/2019"],
    ["10/08/2019"],
    ["05/08/2019"],
    ["01/08/2019"],
    ["28/07/2019"],
    ["26/07/2019"],
    ["24/07/2019"],
    ["20/07/2019"],
    ["16/07/2019"],
    ["10/07/2019"],
    ["07/07/2019"],
    ["03/07/2019"],
    ["01/07/2019"],
    ["25/06/2019"],
    ["22/06/2019"],
    ["16/06/2019"],
    ["11/06/2019"],
    ["02/06/2019"],
    ["31/05/2019"],
    ["22/05/2019"],
    ["21/05/2019"],
    ["28/04/2019"],
    ["09/04/2019"],
    ["08/04/2019"],
    ["14/03/2019"],
    ["11/03/2019"],
    ["04/03/2019"],
    ["19/02/2019"],
    ["17/02/2019"],
    ["03/02/2019"],
    ["24/01/2019"],
    ["22/01/2019"],
    ["20/01/2019"],
    ["10/01/2019"],
    ["09/01/2019"],
    ["06/01/2019"],
  ];

  const cleaningDate = [
    ["31/03/2021"],
    ["31/03/2020"],
    ["31/03/2020"],
    ["31/03/2019"],
  ];

  return {
    baseOption: {
      dataZoom: [
        {
          type: "inside",
          start: 0,
          end: 2,
        },
        {
          show: true,
          type: "slider",
          height: 30,
          // bottom: '15%',
          xAxisIndex: [0],
          start: 0,
          end: 5,
        },
      ],
      // title: [
      //   {
      //     text: 'BoxPlot Experiment',
      //     left: 'center',
      //   },
      //   // {
      //   //   text: 'upper: Q3 + 1.5 * IQR \nlower: Q1 - 1.5 * IQR',
      //   //   borderColor: '#999',
      //   //   borderWidth: 1,
      //   //   textStyle: {
      //   //     fontWeight: 'normal',
      //   //     fontSize: 14,
      //   //     lineHeight: 20,
      //   //   },
      //   //   left: '10%',
      //   //   top: '90%',
      //   // },
      // ],
      dataset: [
        {
          source: data,
        },
        {
          transform: {
            type: "boxplot",
            //config: { itemNameFormatter: 'teste {value}' },
            config: {
              itemNameFormatter: function (params: any) {
                return transitDates[params.value];
              },
            },
          },
        },
        {
          fromDatasetIndex: 1,
          fromTransformResult: 1,
        },
      ],
      tooltip: {
        trigger: "item",
        axisPointer: {
          type: "shadow",
        },
      },
      // calculable: true,
      // grid: {
      //   left: '10%',
      //   right: '10%',
      //   bottom: '15%',
      // },
      grid: [
        {
          // left: 50,
          // right: 50,
          bottom: 90,
          //containLabel: true,
        },
      ],
      xAxis: [
        {
          type: "category",
          boundaryGap: true,
          nameGap: 30,
          // splitArea: {
          //   show: false,
          // },
          splitLine: {
            show: true,
          },
        },

        {
          type: "category",
          boundaryGap: false,
          axisLine: { onZero: false },
          data: [
            "01/01/2021",
            "02/01/2021",
            "03/01/2021",
            "04/01/2021",
            "05/01/2021",
            "06/01/2021",
            "07/01/2021",
            "08/01/2021",
            "09/01/2021",
            "10/01/2021",
            "11/01/2021",
            "12/01/2021",
            "13/01/2021",
            "14/01/2021",
            "15/01/2021",
            "16/01/2021",
            "17/01/2021",
            "18/01/2021",
            "19/01/2021",
            "20/01/2021",
            "21/01/2021",
            "22/01/2021",
            "23/01/2021",
            "24/01/2021",
            "25/01/2021",
            "26/01/2021",
            "27/01/2021",
            "28/01/2021",
            "29/01/2021",
            "30/01/2021",
            "31/01/2021",
            "01/02/2021",
            "02/02/2021",
            "03/02/2021",
            "04/02/2021",
            "05/02/2021",
            "06/02/2021",
            "07/02/2021",
            "08/02/2021",
            "09/02/2021",
            "10/02/2021",
            "11/02/2021",
            "12/02/2021",
            "13/02/2021",
            "14/02/2021",
            "15/02/2021",
            "16/02/2021",
            "17/02/2021",
            "18/02/2021",
            "19/02/2021",
            "20/02/2021",
            "21/02/2021",
            "22/02/2021",
            "23/02/2021",
            "24/02/2021",
            "25/02/2021",
            "26/02/2021",
            "27/02/2021",
            "28/02/2021",
            "01/03/2021",
            "02/03/2021",
            "03/03/2021",
            "04/03/2021",
            "05/03/2021",
            "06/03/2021",
            "07/03/2021",
            "08/03/2021",
            "09/03/2021",
            "10/03/2021",
            "11/03/2021",
            "12/03/2021",
            "13/03/2021",
            "14/03/2021",
            "15/03/2021",
            "16/03/2021",
            "17/03/2021",
            "18/03/2021",
            "19/03/2021",
            "20/03/2021",
            "21/03/2021",
            "22/03/2021",
            "23/03/2022",
            "24/03/2021",
            "25/03/2021",
            "26/03/2021",
            "27/03/2021",
            "28/03/2021",
            "29/03/2021",
            "30/03/2021",
            "31/03/2021",
            "01/04/2021",
            "02/04/2021",
            "03/04/2021",
            "04/04/2021",
            "05/04/2021",
            "06/04/2021",
            "07/04/2021",
            "08/04/2021",
            "09/04/2021",
            "10/04/2021",
            "11/04/2021",
            "12/04/2021",
            "13/04/2021",
            "14/04/2021",
            "15/04/2021",
            "16/04/2021",
            "17/04/2021",
            "18/04/2021",
            "19/04/2021",
            "20/04/2021",
            "21/04/2021",
            "22/04/2021",
            "23/04/2021",
            "24/04/2021",
            "25/04/2021",
            "26/04/2021",
            "27/04/2021",
            "28/04/2021",
            "29/04/2021",
            "30/04/2021",
            "01/05/2021",
            "02/05/2021",
            "03/05/2021",
            "04/05/2021",
            "05/05/2021",
            "06/05/2021",
            "07/05/2021",
            "08/05/2021",
            "09/05/2021",
            "10/05/2021",
            "11/05/2021",
            "12/05/2021",
            "13/05/2021",
            "14/05/2021",
            "15/05/2021",
            "16/05/2021",
            "17/05/2021",
            "18/05/2021",
            "19/05/2021",
            "20/05/2021",
            "21/05/2021",
            "22/05/2021",
            "23/05/2021",
            "24/05/2021",
            "25/05/2021",
            "26/05/2021",
            "27/05/2021",
            "28/05/2021",
            "29/05/2021",
            "30/05/2021",
            "31/05/2021",
            "01/06/2021",
            "02/06/2021",
            "03/06/2021",
            "04/06/2021",
            "05/06/2021",
            "06/06/2021",
            "07/06/2021",
            "08/06/2021",
            "09/06/2021",
            "10/06/2021",
            "11/06/2021",
            "12/06/2021",
            "13/06/2021",
            "14/06/2021",
            "15/06/2021",
            "16/06/2021",
            "17/06/2021",
            "18/06/2021",
            "19/06/2021",
            "20/06/2021",
            "21/06/2021",
            "22/06/2021",
            "23/06/2021",
          ],
        },
      ],
      yAxis: {
        type: "value",
        name: "Normalised Vessel Resistance",
        nameLocation: "middle",
        nameGap: 50,
        axisLine: {
          onZero: true,
        },

        // splitArea: {
        //   show: true,
        // },
      },
      series: [
        {
          name: "boxplot",
          type: "boxplot",
          datasetIndex: 1,
          dimensions: { type: "ordinal" },
          markArea: {
            silent: true,
            itemStyle: {
              opacity: 1,
            },
            data: [
              [
                {
                  name: "Cleaning event",
                  xAxis: "15/05/2021",
                },
                {
                  xAxis: "10/05/2021",
                },
              ],

              // [
              //   {
              //     name: "Cleaning event",
              //     xAxis: "03/01/2021",
              //   },
              //   {
              //     xAxis: "04/01/2021",
              //   },
              // ],
            ],
          },
        },
        {
          name: "outlier",
          type: "scatter",
          datasetIndex: 2,
        },
      ],
    },
  };
};
// QQ-PLOT
const getQQoption = () => {
  /* const Q1 = [
    201.585843237886, 410.0980039844046, 413.529925347446, 421.00089247255767,
    422.2221751418193, 425.36796266397795, 427.94610343952945,
    438.42129327003244, 460.8853261873997, 473.60267684695935,
    529.3936006903226,
  ];
  const Q2 = [
    359.16501902092983, 379.0520646188602, 394.0611867079491,
    399.61601248400916, 401.42715443379313, 403.5135079284643,
    410.84494541026464, 411.1880571095437, 416.4641554262862,
    425.67025403334367, 453.8545685379299, 461.3583183329116, 468.1826975731746,
    487.0483014417229, 528.4685116311318,
  ];*/
  const qy = Q1.sort();
  const qx = Q2.sort();

  const minDataSize = Math.min(qx.length, qy.length); // count total min array
  // console.log(`n ${minDataSize}`);

  //console.log(`Sorted ${qx}`);

  const q = (data, i) => {
    //console.log(`q2 length ${data.length}`);
    if (data.length === minDataSize) return data[i];
    const j = (i / (minDataSize - 1)) * (data.length - 1);
    //console.log(`j value ${j}`);
    const j0 = Math.floor(j);
    //console.log(`j0 value ${j0}`);
    const t = j - j0;
    //console.log(`t value ${t}`);
    //console.log(`Q2 ${data[j0]}`);
    //return t ? Q[j0] * (1 - t) + Q[j0 + 1] * t : Q[j0];
    return t ? data[j0] * (1 - t) + data[j0 + 1] * t : data[j0];
    //383.1454615522481
    //379.0520646188602 * (1 - 0.27) + 379.0520646188602 + 1 * 0.27
  };

  const x = qx.map((v, i) => q(qx, i));
  const y = qy.map((v, i) => q(qy, i));

  const xy = y.map((v, i) => [v, x[i]]);

  // console.log(x);
  // console.log(y);
  // console.log(xy);

  const markLineOpt = {
    animation: false,
    lineStyle: {
      type: "solid",
    },
    data: [
      [
        {
          //start/minY
          //coord: [0, 0],
          xAxis: 0,
          yAxis: 0,
          symbol: "none",
        },
        {
          //angle/maxY
          //coord: [qmax, qmax],
          xAxis: "max",
          yAxis: "max",
          x: "90%",
          y: "13%",
          symbol: "none",
          //type: "max",
        },
      ],
    ],
  };
  return {
    baseOption: {
      xAxis: {},
      yAxis: {},
      tooltip: {
        position: "top",
        trigger: "axis",
        axisPointer: {
          type: "cross",
        },
        //formatter: ["Group {a}: ({c})"],
        //formatter: "{c0}",
      },
      series: [
        {
          symbolSize: 20,
          data: xy,
          type: "scatter",
          markLine: markLineOpt,
          //encode: { tooltip: [0, 1] },
        },
      ],
    },
  };
};

//Histogram
const getOption = (q1, q2) => {
  const toLocaleStr = (string) => string?.toLocaleString();

  /*const Q1 = [
    [413.529925347446],
    [410.0980039844046],
    [201.585843237886],
    [422.2221751418193],
    [427.94610343952945],
    [460.8853261873997],
    [425.36796266397795],
    [421.00089247255767],
    [438.42129327003244],
    [529.3936006903226],
    [473.60267684695935],
  ];
  const Q2 = [
    [401.42715443379313],
    [425.67025403334367],
    [399.61601248400916],
    [453.8545685379299],
    [379.0520646188602],
    [528.4685116311318],
    [487.0483014417229],
    [403.5135079284643],
    [468.1826975731746],
    [394.0611867079491],
    [359.16501902092983],
    [461.3583183329116],
    [411.1880571095437],
    [410.84494541026464],
    [416.4641554262862],
  ];
  const Q3 = Q1;*/

  const data = Q1;
  const data2 = Q2;
  const data3 = Q3;
  const data4 = Q4;

  const extent = d3Array.extent([...data, ...data2, ...data3, ...data4]);

  // for bins size use 2 = 200, 3 = 100, 5 = 50, 20 = 20, 25 = 10, 50 = 5
  const thershold = 5; // or thresholds([0, 2, 5, 10, 15])
  const scale = d3Scales.scaleLinear().domain(extent).nice();
  const histogram = d3Array.bin().domain(scale.domain()).thresholds(thershold);

  const bins1 = histogram(data);
  const hidden = bins1;
  const bins2 = histogram(data2);
  const bins3 = histogram(data3);
  const bins4 = histogram(data4);

  const makeBins = (bins) => {
    const binsLen = bins.flat().length;
    const formattedBins = {
      bins: [],
      data: [],
      customData: [],
    };

    bins.forEach((bin) => {
      formattedBins.bins.push({
        x0: bin.x0,
        x1: bin.x1,
        sample: bin,
      });

      formattedBins.data.push([
        +((bin.x0 + bin.x1) / 2).toFixed(0),
        bin.length,
        bin.x0,
        bin.x1,
        // `${bin.x0} to ${bin.x1}`,
        ((bin.length / binsLen) * 100).toFixed(2),
      ]);

      formattedBins.customData.push([bin.x0, bin.x1, bin.length]);
    });
    return formattedBins;
  };

  const hiddenBins = makeBins(hidden);
  const emphasisStyle = {
    itemStyle: {
      shadowBlur: 10,
      shadowColor: "rgba(0,0,0,0.3)",
    },
  };

  /* const years = [2018, 2019, 2020, 2021];

  const iterate = years.map((year) => year);
  console.log(iterate);

  let options = years.map((year) => {
    let obj = {};
    obj.title = {
      text: `Population of Singapore by District, ${year}`,
      subtext: "Q1- Q3",
      left: "center",
    };
    // obj.series = [
    //   {
    //      stack: "group",
    //      data: populationDataFemale[year]
    //   },
    //   {
    //      stack: "group",
    //      data: populationDataMale[year]
    //   }
    // ];
    return obj;
  });*/

  return {
    baseOption: {
      // title: {
      //   text: `Histogram Experiment, ${years}`,
      //   subtext: "Q1- Q3",
      //   left: "center",
      // },
      // timeline: {
      //   autoPlay: false,
      //   axisType: "category",
      //   bottom: 20,
      //   data: years,
      //   height: null,
      //   inverse: true,
      //   left: null,
      //   orient: "vertical",
      //   playInterval: 1000,
      //   right: 0,
      //   top: 20,
      //   width: 55,
      //   label: {
      //     normal: {
      //       textStyle: {
      //         color: "#aaa",
      //       },
      //     },
      //     emphasis: {
      //       textStyle: {
      //         color: "#333",
      //       },
      //     },
      //   },
      //   symbol: "none",
      //   lineStyle: {
      //     color: "#aaa",
      //   },
      //   checkpointStyle: {
      //     color: "#354EF6",
      //     borderColor: "transparent",
      //     borderWidth: 2,
      //   },
      //   controlStyle: {
      //     showNextBtn: false,
      //     showPrevBtn: false,
      //     normal: {
      //       color: "#354EF6",
      //       borderColor: "#354EF6",
      //     },
      //     emphasis: {
      //       color: "#5d71f7",
      //       borderColor: "#5d71f7",
      //     },
      //   },
      // },
      legend: {
        data: ["Q1", "Q2", "Q3", "Q4"],
        // itemGap: 35,
        // itemHeight: 18,
        // right: '11%',
        top: 20,
      },
      // dataZoom: {
      //   type: 'slider',
      // },
      // grid: [
      //   {
      //     left: 50,
      //     right: 50,
      //     bottom: 100,
      //     containLabel: true,
      //   },
      // ],
      tooltip: {
        formatter: ({ data, value }) => {
          const [_, count, min, max, percent] = value ?? [];
          return data
            ? `<strong>${toLocaleStr(min)}</strong> to <strong>${toLocaleStr(
                max
              )}</strong> <br />
                 Count: <strong>${toLocaleStr(count)}</strong> <br />
                 Percent: <strong>${percent}</strong>% <br />`
            : "";
        },
      },
      xAxis: [
        {
          name: "",
          type: "category",
          scale: true,
          silent: true,
          boundaryGap: true,
          axisLabel: {
            // showMinLabel: false,
            // showMaxLabel: false,
            // interval: 1,
            formatter: (_, index: any) => {
              return `${hiddenBins.bins[index].x0} to ${hiddenBins.bins[index].x1}`;
            },
          },
          splitLine: {
            show: true,
          },
          axisTick: {
            alignWithLabel: true,
          },
        },
        {
          type: "category",
          boundaryGap: true,
          scale: true,
          show: false,
          axisLine: {
            onZero: false,
          },
        },
        {
          type: "category",
          boundaryGap: true,
          axisLine: {
            onZero: false,
          },
          scale: true,
          show: false,
        },
        {
          type: "category",
          scale: true,
          boundaryGap: true,
          axisLine: {
            onZero: false,
          },
          show: false,
        },
      ],
      yAxis: {
        name: "count",
        nameLocation: "middle",
        nameGap: 25,
        axisLine: {
          onZero: true,
        },
      },

      series: [
        {
          name: "",
          type: "bar",
          barWidth: "99%",
          xAxisIndex: 0,
          // silent: true,
          color: "transparent",
          data: hiddenBins.data,
        },
        {
          name: "Q1",
          type: "bar",
          barWidth: "99%",
          xAxisIndex: 1,
          // color: '#C84630',
          //color: "rgba(26, 79, 255, 0.5)",
          // color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          //   {
          //     offset: 0,
          //     color: "rgba(128, 255, 165, 0.5)",
          //   },
          //   {
          //     offset: 1,
          //     color: "rgba(1, 191, 236, 0.5)",
          //   },
          // ]),
          itemStyle: {
            borderColor: "blue",
            opacity: 0.5,
            borderWidth: 2,
          },
          emphasis: emphasisStyle,
          z: 3,
          data: makeBins(bins1).data,
          lineStyle: {
            width: 10,
          },
        },
        {
          name: "Q2",
          type: "bar",
          barWidth: "99%",

          emphasis: emphasisStyle,
          xAxisIndex: 2,
          z: 2,
          // color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          //   {
          //     offset: 0,
          //     color: "rgba(255, 0, 135, 0.5)",
          //   },
          //   {
          //     offset: 1,
          //     color: "rgba(135, 0, 157, 0.5)",
          //   },
          // ]),
          itemStyle: {
            borderColor: "green",
            opacity: 0.5,
            borderWidth: 2,
          },
          data: makeBins(bins2).data,
        },
        {
          name: "Q3",
          type: "bar",
          barWidth: "99%",
          xAxisIndex: 3,
          z: 1,
          itemStyle: {
            borderColor: "orange",
            opacity: 0.5,
            borderWidth: 2,
          },
          emphasis: emphasisStyle,
          data: makeBins(bins3).data,
        },
        {
          name: "Q4",
          type: "bar",
          barWidth: "99%",
          xAxisIndex: 3,
          z: 1,
          itemStyle: {
            borderColor: "red",
            opacity: 0.5,
            borderWidth: 2,
          },
          emphasis: emphasisStyle,
          data: makeBins(bins4).data,
        },
      ],
    },
    // options: options,
  };
};

function App() {
  //Handles Q1-Q2-Q3-Q4 changes on histogram
  const onChartLegendselectchanged = (e) => {
    const selected = [
      e.selected.Q1,
      e.selected.Q2,
      e.selected.Q3,
      e.selected.Q4,
    ];

    console.log(selected);
  };

  const onEvents = {
    //click: onChartClick,
    legendselectchanged: onChartLegendselectchanged,
  };

  return (
    <>
      {/* {JSON.stringify(
        dates.map((date) => format(parseISO(date.slice(0, 10)), "dd/MM/yyyy")),
        null,
        2
      )} */}
      <ReactEcharts
        option={getBoxPlotOption()}
        style={{ height: "80vh", left: 50, top: 50, width: "90vw" }}
        opts={{ renderer: "svg" }}
      />
      <ReactEcharts
        option={getOption()}
        style={{ height: "80vh", left: 50, top: 50, width: "90vw" }}
        opts={{ renderer: "svg" }}
        onEvents={onEvents}
      />
      <ReactEcharts
        option={getQQoption()}
        style={{ height: "80vh", left: 50, top: 50, width: "90vw" }}
        opts={{ renderer: "svg" }}
      />
    </>
  );
}

export default App;
